import { Component, forwardRef, Input, ChangeDetectionStrategy, ChangeDetectorRef, TemplateRef, NgZone, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ScriptService } from './tinymce.script.service';
import { TinymceOptions } from './tinymce.options';
var TinymceComponent = /** @class */ (function () {
    function TinymceComponent(defConfig, ss, cd, zone) {
        this.defConfig = defConfig;
        this.ss = ss;
        this.cd = cd;
        this.zone = zone;
        this.inited = false;
        this.load = true;
        this.id = "_tinymce-" + Math.random()
            .toString(36)
            .substring(2);
        this._disabled = false;
        /** 延迟初始化 */
        this.delay = 0;
    }
    Object.defineProperty(TinymceComponent.prototype, "disabled", {
        set: function (value) {
            this._disabled = value;
            this.setDisabled();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TinymceComponent.prototype, "loading", {
        set: function (value) {
            if (value instanceof TemplateRef)
                this._loadingTpl = value;
            else
                this._loading = value;
        },
        enumerable: true,
        configurable: true
    });
    TinymceComponent.prototype.initDelay = function () {
        var _this = this;
        if (this.delay > 0) {
            setTimeout(function () { return _this.init(); }, this.delay);
        }
        else {
            this.init();
        }
    };
    TinymceComponent.prototype.init = function () {
        var _this = this;
        if (!window.tinymce)
            throw new Error('tinymce js文件加载失败');
        var _a = this, defConfig = _a.defConfig, config = _a.config, id = _a.id;
        if (this.instance)
            return;
        if (defConfig.baseURL) {
            var url = '' + defConfig.baseURL;
            if (url.endsWith('/'))
                url = url.substr(0, url.length - 1);
            tinymce.baseURL = url;
        }
        var userOptions = Object.assign({}, defConfig.config, config);
        var options = Object.assign({
            selector: "#" + id,
        }, defConfig.config, config, {
            setup: function (editor) {
                _this.instance = editor;
                editor.on('change keyup', function () {
                    _this.value = editor.getContent();
                    _this.zone.run(function () { return _this.onChange(_this.value); });
                });
                if (typeof userOptions.setup === 'function') {
                    userOptions.setup(editor);
                }
            },
            init_instance_callback: function (editor) {
                if (editor && _this.value)
                    editor.setContent(_this.value);
                _this.setDisabled();
                if (typeof userOptions.init_instance_callback === 'function') {
                    userOptions.init_instance_callback(editor);
                }
            },
        });
        if (userOptions.auto_focus) {
            options.auto_focus = id;
        }
        tinymce.init(options);
        this.load = false;
        this.cd.detectChanges();
    };
    TinymceComponent.prototype.destroy = function () {
        if (!this.instance) {
            return;
        }
        this.instance.off();
        this.instance.remove('#' + this.id);
        this.instance = null;
    };
    TinymceComponent.prototype.setDisabled = function () {
        if (!this.instance)
            return;
        this.instance.setMode(this._disabled ? 'readonly' : 'design');
    };
    TinymceComponent.prototype.ngOnInit = function () {
        this.inited = true;
    };
    TinymceComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        // 已经存在对象无须进入懒加载模式
        if (window.tinymce) {
            this.initDelay();
            return;
        }
        var defConfig = this.defConfig;
        var baseURL = defConfig && defConfig.baseURL;
        var fileName = defConfig && defConfig.fileName;
        this.ss
            .load((baseURL || './assets/tinymce/') + (fileName || 'tinymce.min.js'))
            .getChangeEmitter()
            .subscribe(function () { return _this.initDelay(); });
    };
    TinymceComponent.prototype.ngOnChanges = function (changes) {
        if (this.inited && changes.config) {
            this.destroy();
            this.initDelay();
        }
    };
    TinymceComponent.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    // reuse-tab: http://ng-alain.com/components/reuse-tab#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F
    TinymceComponent.prototype._onReuseInit = function () {
        this.destroy();
        this.initDelay();
    };
    TinymceComponent.prototype.writeValue = function (value) {
        // value should be NOT NULL
        this.value = value || '';
        if (this.instance) {
            this.instance.setContent(this.value);
        }
    };
    TinymceComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    TinymceComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    TinymceComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
        this.setDisabled();
    };
    TinymceComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tinymce',
                    template: "\n  <textarea id=\"{{id}}\" class=\"tinymce-selector\"></textarea>\n  <div class=\"loading\" *ngIf=\"load\">\n    <ng-container *ngIf=\"_loading; else _loadingTpl\">{{_loading}}</ng-container>\n  </div>\n  ",
                    preserveWhitespaces: false,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return TinymceComponent; }),
                            multi: true,
                        },
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["\n      :host .tinymce-selector {\n        display: none;\n      }\n    "]
                }] }
    ];
    /** @nocollapse */
    TinymceComponent.ctorParameters = function () { return [
        { type: TinymceOptions },
        { type: ScriptService },
        { type: ChangeDetectorRef },
        { type: NgZone }
    ]; };
    TinymceComponent.propDecorators = {
        config: [{ type: Input }],
        disabled: [{ type: Input }],
        loading: [{ type: Input }],
        delay: [{ type: Input }]
    };
    return TinymceComponent;
}());
export { TinymceComponent };

//# sourceMappingURL=data:application/json;base64,