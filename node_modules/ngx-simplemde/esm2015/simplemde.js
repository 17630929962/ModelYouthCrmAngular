import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, NgModule, NgZone, ViewChild, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SimplemdeConfig {
    constructor() {
        /**
         * 风格，默认：`antd`
         */
        this.style = 'antd';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SimplemdeComponent {
    /**
     * @param {?} cog
     * @param {?} cd
     * @param {?} zone
     */
    constructor(cog, cd, zone) {
        this.cog = cog;
        this.cd = cd;
        this.zone = zone;
        this.style = cog.style;
        this.delay = cog.delay || 0;
    }
    /**
     * @return {?}
     */
    initDelay() {
        if (this.delay > 0) {
            setTimeout(() => this.init(), this.delay);
        }
        else {
            this.init();
        }
    }
    /**
     * @return {?}
     */
    init() {
        if (typeof SimpleMDE === 'undefined') {
            throw new Error(`Could not find SimpleMDE object.`);
        }
        this.destroy();
        const /** @type {?} */ config = Object.assign({}, this.cog, this.options, this.style === 'antd'
            ? {
                spellChecker: false,
                autoDownloadFontAwesome: false,
            }
            : {});
        config.element = this.con.nativeElement;
        this.zone.runOutsideAngular(() => {
            this.instance = new SimpleMDE(config);
            if (this.value) {
                this.instance.value(this.value);
            }
            this.instance.codemirror.on('change', () => {
                this.value = this.instance.value();
                this.zone.run(() => this.onChange(this.value));
            });
        });
    }
    /**
     * @return {?}
     */
    destroy() {
        if (this.instance) {
            this.instance.toTextArea();
            this.instance = null;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initDelay();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!changes.options.firstChange)
            this.initDelay();
    }
    /**
     * 获取UE实例
     *
     * \@readonly
     * @return {?}
     */
    get Instance() {
        return this.instance;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
    /**
     * @return {?}
     */
    _onReuseInit() {
        this.initDelay();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
        if (this.instance) {
            this.instance.value(this.value);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) { }
}
SimplemdeComponent.decorators = [
    { type: Component, args: [{
                selector: 'simplemde',
                template: `<textarea #con></textarea>`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => SimplemdeComponent),
                        multi: true,
                    },
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/** @nocollapse */
SimplemdeComponent.ctorParameters = () => [
    { type: SimplemdeConfig, },
    { type: ChangeDetectorRef, },
    { type: NgZone, },
];
SimplemdeComponent.propDecorators = {
    "con": [{ type: ViewChild, args: ['con',] },],
    "options": [{ type: Input },],
    "style": [{ type: Input },],
    "delay": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SimplemdeModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: SimplemdeModule,
            providers: [{ provide: SimplemdeConfig, useValue: config }],
        };
    }
}
SimplemdeModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [SimplemdeComponent],
                exports: [SimplemdeComponent],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { SimplemdeComponent, SimplemdeConfig, SimplemdeModule };
//# sourceMappingURL=simplemde.js.map
